version: '3.8'

services:
  # Backend API
  backend:
    build:
      context: .
      dockerfile: deploy/docker/Dockerfile.backend
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=development
      - DEBUG=true
      - API_HOST=0.0.0.0
      - API_PORT=8000
    volumes:
      - ./app:/app
      - ./mcp.json:/app/mcp.json
      - ./.env:/app/.env
    depends_on:
      - postgres
      - qdrant
    networks:
      - agentic-network

  # Frontend
  frontend:
    build:
      context: .
      dockerfile: deploy/docker/Dockerfile.frontend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - VITE_API_URL=http://localhost:8000
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - agentic-network

  # PostgreSQL for memory and caching
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=agentic_bi
      - POSTGRES_USER=agentic_user
      - POSTGRES_PASSWORD=agentic_pass
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./deploy/scripts/init_postgres.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - agentic-network

  # Qdrant for vector search
  qdrant:
    image: qdrant/qdrant:latest
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
    networks:
      - agentic-network

  # Redis for session management (optional)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - agentic-network

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./deploy/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - agentic-network

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./deploy/monitoring/grafana-dashboard.json:/etc/grafana/provisioning/dashboards/dashboard.json
    depends_on:
      - prometheus
    networks:
      - agentic-network

volumes:
  postgres_data:
  qdrant_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  agentic-network:
    driver: bridge